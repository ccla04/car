ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	NMI_Handler:
  25              	.LFB65:
  26              		.file 1 "Core/Src/stm32f1xx_it.c"
   1:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Header */
   2:Core/Src/stm32f1xx_it.c **** /**
   3:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   4:Core/Src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   5:Core/Src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   6:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
   7:Core/Src/stm32f1xx_it.c ****   * @attention
   8:Core/Src/stm32f1xx_it.c ****   *
   9:Core/Src/stm32f1xx_it.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/stm32f1xx_it.c ****   * All rights reserved.
  11:Core/Src/stm32f1xx_it.c ****   *
  12:Core/Src/stm32f1xx_it.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/stm32f1xx_it.c ****   * in the root directory of this software component.
  14:Core/Src/stm32f1xx_it.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/stm32f1xx_it.c ****   *
  16:Core/Src/stm32f1xx_it.c ****   ******************************************************************************
  17:Core/Src/stm32f1xx_it.c ****   */
  18:Core/Src/stm32f1xx_it.c **** /* USER CODE END Header */
  19:Core/Src/stm32f1xx_it.c **** 
  20:Core/Src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/stm32f1xx_it.c **** #include "main.h"
  22:Core/Src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  23:Core/Src/stm32f1xx_it.c **** /* Private includes ----------------------------------------------------------*/
  24:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN Includes */
  25:Core/Src/stm32f1xx_it.c **** /* USER CODE END Includes */
  26:Core/Src/stm32f1xx_it.c **** 
  27:Core/Src/stm32f1xx_it.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN TD */
  29:Core/Src/stm32f1xx_it.c **** 
  30:Core/Src/stm32f1xx_it.c **** /* USER CODE END TD */
  31:Core/Src/stm32f1xx_it.c **** 
  32:Core/Src/stm32f1xx_it.c **** /* Private define ------------------------------------------------------------*/
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 2


  33:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  34:Core/Src/stm32f1xx_it.c **** 
  35:Core/Src/stm32f1xx_it.c **** /* USER CODE END PD */
  36:Core/Src/stm32f1xx_it.c **** 
  37:Core/Src/stm32f1xx_it.c **** /* Private macro -------------------------------------------------------------*/
  38:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PM */
  39:Core/Src/stm32f1xx_it.c **** 
  40:Core/Src/stm32f1xx_it.c **** /* USER CODE END PM */
  41:Core/Src/stm32f1xx_it.c **** 
  42:Core/Src/stm32f1xx_it.c **** /* Private variables ---------------------------------------------------------*/
  43:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PV */
  44:Core/Src/stm32f1xx_it.c **** extern uint8_t uartdata[8];
  45:Core/Src/stm32f1xx_it.c **** extern int last_tick;
  46:Core/Src/stm32f1xx_it.c **** // extern uint16_t yaw_angle;
  47:Core/Src/stm32f1xx_it.c **** extern uint16_t pitch_angle;
  48:Core/Src/stm32f1xx_it.c **** // extern uint16_t roll_angle;
  49:Core/Src/stm32f1xx_it.c **** // extern uint16_t last_yaw_angle;
  50:Core/Src/stm32f1xx_it.c **** // extern uint16_t last_roll_angle;
  51:Core/Src/stm32f1xx_it.c **** extern int pitch_p;
  52:Core/Src/stm32f1xx_it.c **** extern int pitch_i;
  53:Core/Src/stm32f1xx_it.c **** extern int pitch_d;
  54:Core/Src/stm32f1xx_it.c **** extern int left_i;
  55:Core/Src/stm32f1xx_it.c **** extern int left_d;
  56:Core/Src/stm32f1xx_it.c **** extern int right_i;
  57:Core/Src/stm32f1xx_it.c **** extern int right_d;
  58:Core/Src/stm32f1xx_it.c **** // int roll_I=0;
  59:Core/Src/stm32f1xx_it.c **** // int roll_D=0;
  60:Core/Src/stm32f1xx_it.c **** struct motor {
  61:Core/Src/stm32f1xx_it.c ****   int encoder_val;
  62:Core/Src/stm32f1xx_it.c ****   int last_speed;
  63:Core/Src/stm32f1xx_it.c ****   int current_speed;
  64:Core/Src/stm32f1xx_it.c ****   int encoder_last_val;
  65:Core/Src/stm32f1xx_it.c **** };
  66:Core/Src/stm32f1xx_it.c **** extern struct motor motor_left;
  67:Core/Src/stm32f1xx_it.c **** extern struct motor motor_right;
  68:Core/Src/stm32f1xx_it.c **** /* USER CODE END PV */
  69:Core/Src/stm32f1xx_it.c **** 
  70:Core/Src/stm32f1xx_it.c **** /* Private function prototypes -----------------------------------------------*/
  71:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PFP */
  72:Core/Src/stm32f1xx_it.c **** 
  73:Core/Src/stm32f1xx_it.c **** /* USER CODE END PFP */
  74:Core/Src/stm32f1xx_it.c **** 
  75:Core/Src/stm32f1xx_it.c **** /* Private user code ---------------------------------------------------------*/
  76:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  77:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN PD */
  78:Core/Src/stm32f1xx_it.c **** //TODO: change to correct pin
  79:Core/Src/stm32f1xx_it.c **** // void move_l(int speed) {
  80:Core/Src/stm32f1xx_it.c **** //     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
  81:Core/Src/stm32f1xx_it.c **** //     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
  82:Core/Src/stm32f1xx_it.c **** //     TIM1->CCR1 = speed;
  83:Core/Src/stm32f1xx_it.c **** // }
  84:Core/Src/stm32f1xx_it.c **** 
  85:Core/Src/stm32f1xx_it.c **** // void move_r(int speed) {
  86:Core/Src/stm32f1xx_it.c **** //     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
  87:Core/Src/stm32f1xx_it.c **** //     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
  88:Core/Src/stm32f1xx_it.c **** //     TIM1->CCR4 = speed;
  89:Core/Src/stm32f1xx_it.c **** // }
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 3


  90:Core/Src/stm32f1xx_it.c **** 
  91:Core/Src/stm32f1xx_it.c **** /* USER CODE END 0 */
  92:Core/Src/stm32f1xx_it.c **** 
  93:Core/Src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  94:Core/Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim2;
  95:Core/Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  96:Core/Src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim4;
  97:Core/Src/stm32f1xx_it.c **** extern UART_HandleTypeDef huart2;
  98:Core/Src/stm32f1xx_it.c **** /* USER CODE BEGIN EV */
  99:Core/Src/stm32f1xx_it.c **** 
 100:Core/Src/stm32f1xx_it.c **** /* USER CODE END EV */
 101:Core/Src/stm32f1xx_it.c **** 
 102:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 103:Core/Src/stm32f1xx_it.c **** /*           Cortex-M3 Processor Interruption and Exception Handlers          */
 104:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 105:Core/Src/stm32f1xx_it.c **** /**
 106:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Non maskable interrupt.
 107:Core/Src/stm32f1xx_it.c ****   */
 108:Core/Src/stm32f1xx_it.c **** void NMI_Handler(void)
 109:Core/Src/stm32f1xx_it.c **** {
  27              		.loc 1 109 1 view -0
  28              		.cfi_startproc
  29              		@ Volatile: function does not return.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.L2:
 110:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
 111:Core/Src/stm32f1xx_it.c **** 
 112:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
 113:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
 114:Core/Src/stm32f1xx_it.c ****    while (1)
  34              		.loc 1 114 4 discriminator 1 view .LVU1
 115:Core/Src/stm32f1xx_it.c ****   {
 116:Core/Src/stm32f1xx_it.c ****   }
  35              		.loc 1 116 3 discriminator 1 view .LVU2
  36 0000 FEE7     		b	.L2
  37              		.cfi_endproc
  38              	.LFE65:
  40              		.section	.text.HardFault_Handler,"ax",%progbits
  41              		.align	1
  42              		.global	HardFault_Handler
  43              		.syntax unified
  44              		.thumb
  45              		.thumb_func
  46              		.fpu softvfp
  48              	HardFault_Handler:
  49              	.LFB66:
 117:Core/Src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
 118:Core/Src/stm32f1xx_it.c **** }
 119:Core/Src/stm32f1xx_it.c **** 
 120:Core/Src/stm32f1xx_it.c **** /**
 121:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Hard fault interrupt.
 122:Core/Src/stm32f1xx_it.c ****   */
 123:Core/Src/stm32f1xx_it.c **** void HardFault_Handler(void)
 124:Core/Src/stm32f1xx_it.c **** {
  50              		.loc 1 124 1 view -0
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 4


  51              		.cfi_startproc
  52              		@ Volatile: function does not return.
  53              		@ args = 0, pretend = 0, frame = 0
  54              		@ frame_needed = 0, uses_anonymous_args = 0
  55              		@ link register save eliminated.
  56              	.L4:
 125:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
 126:Core/Src/stm32f1xx_it.c **** 
 127:Core/Src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
 128:Core/Src/stm32f1xx_it.c ****   while (1)
  57              		.loc 1 128 3 discriminator 1 view .LVU4
 129:Core/Src/stm32f1xx_it.c ****   {
 130:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_HardFault_IRQn 0 */
 131:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_HardFault_IRQn 0 */
 132:Core/Src/stm32f1xx_it.c ****   }
  58              		.loc 1 132 3 discriminator 1 view .LVU5
  59 0000 FEE7     		b	.L4
  60              		.cfi_endproc
  61              	.LFE66:
  63              		.section	.text.MemManage_Handler,"ax",%progbits
  64              		.align	1
  65              		.global	MemManage_Handler
  66              		.syntax unified
  67              		.thumb
  68              		.thumb_func
  69              		.fpu softvfp
  71              	MemManage_Handler:
  72              	.LFB67:
 133:Core/Src/stm32f1xx_it.c **** }
 134:Core/Src/stm32f1xx_it.c **** 
 135:Core/Src/stm32f1xx_it.c **** /**
 136:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Memory management fault.
 137:Core/Src/stm32f1xx_it.c ****   */
 138:Core/Src/stm32f1xx_it.c **** void MemManage_Handler(void)
 139:Core/Src/stm32f1xx_it.c **** {
  73              		.loc 1 139 1 view -0
  74              		.cfi_startproc
  75              		@ Volatile: function does not return.
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              		@ link register save eliminated.
  79              	.L6:
 140:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
 141:Core/Src/stm32f1xx_it.c **** 
 142:Core/Src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
 143:Core/Src/stm32f1xx_it.c ****   while (1)
  80              		.loc 1 143 3 discriminator 1 view .LVU7
 144:Core/Src/stm32f1xx_it.c ****   {
 145:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
 146:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_MemoryManagement_IRQn 0 */
 147:Core/Src/stm32f1xx_it.c ****   }
  81              		.loc 1 147 3 discriminator 1 view .LVU8
  82 0000 FEE7     		b	.L6
  83              		.cfi_endproc
  84              	.LFE67:
  86              		.section	.text.BusFault_Handler,"ax",%progbits
  87              		.align	1
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 5


  88              		.global	BusFault_Handler
  89              		.syntax unified
  90              		.thumb
  91              		.thumb_func
  92              		.fpu softvfp
  94              	BusFault_Handler:
  95              	.LFB68:
 148:Core/Src/stm32f1xx_it.c **** }
 149:Core/Src/stm32f1xx_it.c **** 
 150:Core/Src/stm32f1xx_it.c **** /**
 151:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Prefetch fault, memory access fault.
 152:Core/Src/stm32f1xx_it.c ****   */
 153:Core/Src/stm32f1xx_it.c **** void BusFault_Handler(void)
 154:Core/Src/stm32f1xx_it.c **** {
  96              		.loc 1 154 1 view -0
  97              		.cfi_startproc
  98              		@ Volatile: function does not return.
  99              		@ args = 0, pretend = 0, frame = 0
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              		@ link register save eliminated.
 102              	.L8:
 155:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 156:Core/Src/stm32f1xx_it.c **** 
 157:Core/Src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 158:Core/Src/stm32f1xx_it.c ****   while (1)
 103              		.loc 1 158 3 discriminator 1 view .LVU10
 159:Core/Src/stm32f1xx_it.c ****   {
 160:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_BusFault_IRQn 0 */
 161:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_BusFault_IRQn 0 */
 162:Core/Src/stm32f1xx_it.c ****   }
 104              		.loc 1 162 3 discriminator 1 view .LVU11
 105 0000 FEE7     		b	.L8
 106              		.cfi_endproc
 107              	.LFE68:
 109              		.section	.text.UsageFault_Handler,"ax",%progbits
 110              		.align	1
 111              		.global	UsageFault_Handler
 112              		.syntax unified
 113              		.thumb
 114              		.thumb_func
 115              		.fpu softvfp
 117              	UsageFault_Handler:
 118              	.LFB69:
 163:Core/Src/stm32f1xx_it.c **** }
 164:Core/Src/stm32f1xx_it.c **** 
 165:Core/Src/stm32f1xx_it.c **** /**
 166:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Undefined instruction or illegal state.
 167:Core/Src/stm32f1xx_it.c ****   */
 168:Core/Src/stm32f1xx_it.c **** void UsageFault_Handler(void)
 169:Core/Src/stm32f1xx_it.c **** {
 119              		.loc 1 169 1 view -0
 120              		.cfi_startproc
 121              		@ Volatile: function does not return.
 122              		@ args = 0, pretend = 0, frame = 0
 123              		@ frame_needed = 0, uses_anonymous_args = 0
 124              		@ link register save eliminated.
 125              	.L10:
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 6


 170:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 171:Core/Src/stm32f1xx_it.c **** 
 172:Core/Src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 173:Core/Src/stm32f1xx_it.c ****   while (1)
 126              		.loc 1 173 3 discriminator 1 view .LVU13
 174:Core/Src/stm32f1xx_it.c ****   {
 175:Core/Src/stm32f1xx_it.c ****     /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
 176:Core/Src/stm32f1xx_it.c ****     /* USER CODE END W1_UsageFault_IRQn 0 */
 177:Core/Src/stm32f1xx_it.c ****   }
 127              		.loc 1 177 3 discriminator 1 view .LVU14
 128 0000 FEE7     		b	.L10
 129              		.cfi_endproc
 130              	.LFE69:
 132              		.section	.text.SVC_Handler,"ax",%progbits
 133              		.align	1
 134              		.global	SVC_Handler
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu softvfp
 140              	SVC_Handler:
 141              	.LFB70:
 178:Core/Src/stm32f1xx_it.c **** }
 179:Core/Src/stm32f1xx_it.c **** 
 180:Core/Src/stm32f1xx_it.c **** /**
 181:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System service call via SWI instruction.
 182:Core/Src/stm32f1xx_it.c ****   */
 183:Core/Src/stm32f1xx_it.c **** void SVC_Handler(void)
 184:Core/Src/stm32f1xx_it.c **** {
 142              		.loc 1 184 1 view -0
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              		@ link register save eliminated.
 185:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 186:Core/Src/stm32f1xx_it.c **** 
 187:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 188:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 189:Core/Src/stm32f1xx_it.c **** 
 190:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 191:Core/Src/stm32f1xx_it.c **** }
 147              		.loc 1 191 1 view .LVU16
 148 0000 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE70:
 152              		.section	.text.DebugMon_Handler,"ax",%progbits
 153              		.align	1
 154              		.global	DebugMon_Handler
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu softvfp
 160              	DebugMon_Handler:
 161              	.LFB71:
 192:Core/Src/stm32f1xx_it.c **** 
 193:Core/Src/stm32f1xx_it.c **** /**
 194:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Debug monitor.
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 7


 195:Core/Src/stm32f1xx_it.c ****   */
 196:Core/Src/stm32f1xx_it.c **** void DebugMon_Handler(void)
 197:Core/Src/stm32f1xx_it.c **** {
 162              		.loc 1 197 1 view -0
 163              		.cfi_startproc
 164              		@ args = 0, pretend = 0, frame = 0
 165              		@ frame_needed = 0, uses_anonymous_args = 0
 166              		@ link register save eliminated.
 198:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 199:Core/Src/stm32f1xx_it.c **** 
 200:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 201:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 202:Core/Src/stm32f1xx_it.c **** 
 203:Core/Src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 204:Core/Src/stm32f1xx_it.c **** }
 167              		.loc 1 204 1 view .LVU18
 168 0000 7047     		bx	lr
 169              		.cfi_endproc
 170              	.LFE71:
 172              		.section	.text.PendSV_Handler,"ax",%progbits
 173              		.align	1
 174              		.global	PendSV_Handler
 175              		.syntax unified
 176              		.thumb
 177              		.thumb_func
 178              		.fpu softvfp
 180              	PendSV_Handler:
 181              	.LFB72:
 205:Core/Src/stm32f1xx_it.c **** 
 206:Core/Src/stm32f1xx_it.c **** /**
 207:Core/Src/stm32f1xx_it.c ****   * @brief This function handles Pendable request for system service.
 208:Core/Src/stm32f1xx_it.c ****   */
 209:Core/Src/stm32f1xx_it.c **** void PendSV_Handler(void)
 210:Core/Src/stm32f1xx_it.c **** {
 182              		.loc 1 210 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
 211:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 212:Core/Src/stm32f1xx_it.c **** 
 213:Core/Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 214:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 215:Core/Src/stm32f1xx_it.c **** 
 216:Core/Src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 217:Core/Src/stm32f1xx_it.c **** }
 187              		.loc 1 217 1 view .LVU20
 188 0000 7047     		bx	lr
 189              		.cfi_endproc
 190              	.LFE72:
 192              		.section	.text.SysTick_Handler,"ax",%progbits
 193              		.align	1
 194              		.global	SysTick_Handler
 195              		.syntax unified
 196              		.thumb
 197              		.thumb_func
 198              		.fpu softvfp
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 8


 200              	SysTick_Handler:
 201              	.LFB73:
 218:Core/Src/stm32f1xx_it.c **** 
 219:Core/Src/stm32f1xx_it.c **** /**
 220:Core/Src/stm32f1xx_it.c ****   * @brief This function handles System tick timer.
 221:Core/Src/stm32f1xx_it.c ****   */
 222:Core/Src/stm32f1xx_it.c **** void SysTick_Handler(void)
 223:Core/Src/stm32f1xx_it.c **** {
 202              		.loc 1 223 1 view -0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 206 0000 08B5     		push	{r3, lr}
 207              	.LCFI0:
 208              		.cfi_def_cfa_offset 8
 209              		.cfi_offset 3, -8
 210              		.cfi_offset 14, -4
 224:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 225:Core/Src/stm32f1xx_it.c **** 
 226:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 227:Core/Src/stm32f1xx_it.c ****   HAL_IncTick();
 211              		.loc 1 227 3 view .LVU22
 212 0002 FFF7FEFF 		bl	HAL_IncTick
 213              	.LVL0:
 228:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 229:Core/Src/stm32f1xx_it.c **** 
 230:Core/Src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 231:Core/Src/stm32f1xx_it.c **** }
 214              		.loc 1 231 1 is_stmt 0 view .LVU23
 215 0006 08BD     		pop	{r3, pc}
 216              		.cfi_endproc
 217              	.LFE73:
 219              		.section	.text.TIM2_IRQHandler,"ax",%progbits
 220              		.align	1
 221              		.global	TIM2_IRQHandler
 222              		.syntax unified
 223              		.thumb
 224              		.thumb_func
 225              		.fpu softvfp
 227              	TIM2_IRQHandler:
 228              	.LFB74:
 232:Core/Src/stm32f1xx_it.c **** 
 233:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 234:Core/Src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 235:Core/Src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 236:Core/Src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 237:Core/Src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 238:Core/Src/stm32f1xx_it.c **** /******************************************************************************/
 239:Core/Src/stm32f1xx_it.c **** 
 240:Core/Src/stm32f1xx_it.c **** /**
 241:Core/Src/stm32f1xx_it.c ****   * @brief This function handles TIM2 global interrupt.
 242:Core/Src/stm32f1xx_it.c ****   */
 243:Core/Src/stm32f1xx_it.c **** void TIM2_IRQHandler(void)
 244:Core/Src/stm32f1xx_it.c **** {
 229              		.loc 1 244 1 is_stmt 1 view -0
 230              		.cfi_startproc
 231              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 9


 232              		@ frame_needed = 0, uses_anonymous_args = 0
 233 0000 08B5     		push	{r3, lr}
 234              	.LCFI1:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 3, -8
 237              		.cfi_offset 14, -4
 245:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 0 */
 246:Core/Src/stm32f1xx_it.c **** 
 247:Core/Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 0 */
 248:Core/Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim2);
 238              		.loc 1 248 3 view .LVU25
 239 0002 0248     		ldr	r0, .L18
 240 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 241              	.LVL1:
 249:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM2_IRQn 1 */
 250:Core/Src/stm32f1xx_it.c **** 
 251:Core/Src/stm32f1xx_it.c ****   /* USER CODE END TIM2_IRQn 1 */
 252:Core/Src/stm32f1xx_it.c **** }
 242              		.loc 1 252 1 is_stmt 0 view .LVU26
 243 0008 08BD     		pop	{r3, pc}
 244              	.L19:
 245 000a 00BF     		.align	2
 246              	.L18:
 247 000c 00000000 		.word	htim2
 248              		.cfi_endproc
 249              	.LFE74:
 251              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 252              		.align	1
 253              		.global	TIM3_IRQHandler
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu softvfp
 259              	TIM3_IRQHandler:
 260              	.LFB75:
 253:Core/Src/stm32f1xx_it.c **** 
 254:Core/Src/stm32f1xx_it.c **** /**
 255:Core/Src/stm32f1xx_it.c ****   * @brief This function handles TIM3 global interrupt.
 256:Core/Src/stm32f1xx_it.c ****   */
 257:Core/Src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 258:Core/Src/stm32f1xx_it.c **** {
 261              		.loc 1 258 1 is_stmt 1 view -0
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 0
 264              		@ frame_needed = 0, uses_anonymous_args = 0
 265 0000 08B5     		push	{r3, lr}
 266              	.LCFI2:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 3, -8
 269              		.cfi_offset 14, -4
 259:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 260:Core/Src/stm32f1xx_it.c **** 
 261:Core/Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
 262:Core/Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
 270              		.loc 1 262 3 view .LVU28
 271 0002 0248     		ldr	r0, .L22
 272 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 10


 273              	.LVL2:
 263:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
 264:Core/Src/stm32f1xx_it.c **** 
 265:Core/Src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 266:Core/Src/stm32f1xx_it.c **** }
 274              		.loc 1 266 1 is_stmt 0 view .LVU29
 275 0008 08BD     		pop	{r3, pc}
 276              	.L23:
 277 000a 00BF     		.align	2
 278              	.L22:
 279 000c 00000000 		.word	htim3
 280              		.cfi_endproc
 281              	.LFE75:
 283              		.section	.text.TIM4_IRQHandler,"ax",%progbits
 284              		.align	1
 285              		.global	TIM4_IRQHandler
 286              		.syntax unified
 287              		.thumb
 288              		.thumb_func
 289              		.fpu softvfp
 291              	TIM4_IRQHandler:
 292              	.LFB76:
 267:Core/Src/stm32f1xx_it.c **** 
 268:Core/Src/stm32f1xx_it.c **** /**
 269:Core/Src/stm32f1xx_it.c ****   * @brief This function handles TIM4 global interrupt.
 270:Core/Src/stm32f1xx_it.c ****   */
 271:Core/Src/stm32f1xx_it.c **** void TIM4_IRQHandler(void)
 272:Core/Src/stm32f1xx_it.c **** {
 293              		.loc 1 272 1 is_stmt 1 view -0
 294              		.cfi_startproc
 295              		@ args = 0, pretend = 0, frame = 0
 296              		@ frame_needed = 0, uses_anonymous_args = 0
 297 0000 08B5     		push	{r3, lr}
 298              	.LCFI3:
 299              		.cfi_def_cfa_offset 8
 300              		.cfi_offset 3, -8
 301              		.cfi_offset 14, -4
 273:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 0 */
 274:Core/Src/stm32f1xx_it.c ****   // motor_left.encoder_val = __HAL_TIM_GET_COUNTER(&htim2);
 275:Core/Src/stm32f1xx_it.c ****   // motor_left.current_speed = motor_left.encoder_val - motor_left.encoder_last_val;
 276:Core/Src/stm32f1xx_it.c ****   // motor_left.encoder_last_val = motor_left.encoder_val;
 277:Core/Src/stm32f1xx_it.c ****   // motor_right.encoder_val = __HAL_TIM_GET_COUNTER(&htim3);
 278:Core/Src/stm32f1xx_it.c ****   // motor_right.current_speed = motor_right.encoder_val - motor_right.encoder_last_val;
 279:Core/Src/stm32f1xx_it.c ****   // motor_right.encoder_last_val = motor_right.encoder_val;
 280:Core/Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 0 */
 281:Core/Src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim4);
 302              		.loc 1 281 3 view .LVU31
 303 0002 0248     		ldr	r0, .L26
 304 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 305              	.LVL3:
 282:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM4_IRQn 1 */
 283:Core/Src/stm32f1xx_it.c **** 
 284:Core/Src/stm32f1xx_it.c ****   /* USER CODE END TIM4_IRQn 1 */
 285:Core/Src/stm32f1xx_it.c **** }
 306              		.loc 1 285 1 is_stmt 0 view .LVU32
 307 0008 08BD     		pop	{r3, pc}
 308              	.L27:
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 11


 309 000a 00BF     		.align	2
 310              	.L26:
 311 000c 00000000 		.word	htim4
 312              		.cfi_endproc
 313              	.LFE76:
 315              		.section	.text.USART2_IRQHandler,"ax",%progbits
 316              		.align	1
 317              		.global	USART2_IRQHandler
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu softvfp
 323              	USART2_IRQHandler:
 324              	.LFB77:
 286:Core/Src/stm32f1xx_it.c **** 
 287:Core/Src/stm32f1xx_it.c **** /**
 288:Core/Src/stm32f1xx_it.c ****   * @brief This function handles USART2 global interrupt.
 289:Core/Src/stm32f1xx_it.c ****   */
 290:Core/Src/stm32f1xx_it.c **** void USART2_IRQHandler(void)
 291:Core/Src/stm32f1xx_it.c **** {
 325              		.loc 1 291 1 is_stmt 1 view -0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329 0000 08B5     		push	{r3, lr}
 330              	.LCFI4:
 331              		.cfi_def_cfa_offset 8
 332              		.cfi_offset 3, -8
 333              		.cfi_offset 14, -4
 292:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 0 */
 293:Core/Src/stm32f1xx_it.c ****   if (HAL_UART_GetState(&huart2) != HAL_UART_STATE_RESET) {
 334              		.loc 1 293 3 view .LVU34
 335              		.loc 1 293 7 is_stmt 0 view .LVU35
 336 0002 0E48     		ldr	r0, .L32
 337 0004 FFF7FEFF 		bl	HAL_UART_GetState
 338              	.LVL4:
 339              		.loc 1 293 6 view .LVU36
 340 0008 18B1     		cbz	r0, .L29
 294:Core/Src/stm32f1xx_it.c ****     if (uartdata[0]==0xAA && uartdata[7]==0x55) {
 341              		.loc 1 294 5 is_stmt 1 view .LVU37
 342              		.loc 1 294 17 is_stmt 0 view .LVU38
 343 000a 0D4B     		ldr	r3, .L32+4
 344 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 345              		.loc 1 294 8 view .LVU39
 346 000e AA2B     		cmp	r3, #170
 347 0010 03D0     		beq	.L31
 348              	.L29:
 295:Core/Src/stm32f1xx_it.c ****       // last_yaw_angle = yaw_angle;
 296:Core/Src/stm32f1xx_it.c ****       // last_roll_angle = roll_angle;
 297:Core/Src/stm32f1xx_it.c ****       // yaw_angle = uartdata[1]<<8|uartdata[2];
 298:Core/Src/stm32f1xx_it.c ****       pitch_angle = uartdata[3]<<8|uartdata[4]/200;
 299:Core/Src/stm32f1xx_it.c ****       // roll_angle = uartdata[5]<<8|uartdata[6];
 300:Core/Src/stm32f1xx_it.c ****       //Below is the pid
 301:Core/Src/stm32f1xx_it.c ****       // pitch_p = 18000 - pitch_angle;
 302:Core/Src/stm32f1xx_it.c ****       // pitch_i += pitch_angle/(HAL_GetTick() - last_tick);
 303:Core/Src/stm32f1xx_it.c ****       // pitch_d = (pitch_angle - last_pitch_angle)/(HAL_GetTick() - last_tick)/0.001;
 304:Core/Src/stm32f1xx_it.c ****       // left_i += (-motor_left.current_speed)/(HAL_GetTick()-last_tick);
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 12


 305:Core/Src/stm32f1xx_it.c ****       // left_d = (motor_left.last_speed-motor_left.current_speed)/(HAL_GetTick()-last_tick)/0.001;
 306:Core/Src/stm32f1xx_it.c ****       // right_i += (-motor_right.current_speed)/(HAL_GetTick()-last_tick);
 307:Core/Src/stm32f1xx_it.c ****       // right_d = (motor_right.last_speed-motor_right.current_speed)/(HAL_GetTick()-last_tick)/0.0
 308:Core/Src/stm32f1xx_it.c ****       // move_l(1 * pitch_p + 0 * pitch_i + 0.5 * pitch_d + 1 * motor_left.current_speed + 0.5 * le
 309:Core/Src/stm32f1xx_it.c ****       // move_r(1 * pitch_p + 0 * pitch_i + 0.5 * pitch_d + 1 * motor_right.current_speed + 0.5 * r
 310:Core/Src/stm32f1xx_it.c ****       // last_tick = HAL_GetTick();
 311:Core/Src/stm32f1xx_it.c ****     }
 312:Core/Src/stm32f1xx_it.c ****   }
 313:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 0 */
 314:Core/Src/stm32f1xx_it.c ****   HAL_UART_IRQHandler(&huart2);
 349              		.loc 1 314 3 is_stmt 1 view .LVU40
 350 0012 0A48     		ldr	r0, .L32
 351 0014 FFF7FEFF 		bl	HAL_UART_IRQHandler
 352              	.LVL5:
 315:Core/Src/stm32f1xx_it.c ****   /* USER CODE BEGIN USART2_IRQn 1 */
 316:Core/Src/stm32f1xx_it.c **** 
 317:Core/Src/stm32f1xx_it.c ****   /* USER CODE END USART2_IRQn 1 */
 318:Core/Src/stm32f1xx_it.c **** }
 353              		.loc 1 318 1 is_stmt 0 view .LVU41
 354 0018 08BD     		pop	{r3, pc}
 355              	.L31:
 294:Core/Src/stm32f1xx_it.c ****       // last_yaw_angle = yaw_angle;
 356              		.loc 1 294 38 discriminator 1 view .LVU42
 357 001a 094B     		ldr	r3, .L32+4
 358 001c DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 294:Core/Src/stm32f1xx_it.c ****       // last_yaw_angle = yaw_angle;
 359              		.loc 1 294 27 discriminator 1 view .LVU43
 360 001e 552B     		cmp	r3, #85
 361 0020 F7D1     		bne	.L29
 298:Core/Src/stm32f1xx_it.c ****       // roll_angle = uartdata[5]<<8|uartdata[6];
 362              		.loc 1 298 7 is_stmt 1 view .LVU44
 298:Core/Src/stm32f1xx_it.c ****       // roll_angle = uartdata[5]<<8|uartdata[6];
 363              		.loc 1 298 29 is_stmt 0 view .LVU45
 364 0022 074A     		ldr	r2, .L32+4
 365 0024 D178     		ldrb	r1, [r2, #3]	@ zero_extendqisi2
 298:Core/Src/stm32f1xx_it.c ****       // roll_angle = uartdata[5]<<8|uartdata[6];
 366              		.loc 1 298 44 view .LVU46
 367 0026 1379     		ldrb	r3, [r2, #4]	@ zero_extendqisi2
 298:Core/Src/stm32f1xx_it.c ****       // roll_angle = uartdata[5]<<8|uartdata[6];
 368              		.loc 1 298 35 view .LVU47
 369 0028 064A     		ldr	r2, .L32+8
 370 002a A2FB0323 		umull	r2, r3, r2, r3
 371 002e 9B09     		lsrs	r3, r3, #6
 372 0030 43EA0123 		orr	r3, r3, r1, lsl #8
 298:Core/Src/stm32f1xx_it.c ****       // roll_angle = uartdata[5]<<8|uartdata[6];
 373              		.loc 1 298 19 view .LVU48
 374 0034 044A     		ldr	r2, .L32+12
 375 0036 1380     		strh	r3, [r2]	@ movhi
 376 0038 EBE7     		b	.L29
 377              	.L33:
 378 003a 00BF     		.align	2
 379              	.L32:
 380 003c 00000000 		.word	huart2
 381 0040 00000000 		.word	uartdata
 382 0044 1F85EB51 		.word	1374389535
 383 0048 00000000 		.word	pitch_angle
 384              		.cfi_endproc
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 13


 385              	.LFE77:
 387              		.text
 388              	.Letext0:
 389              		.file 2 "/Users/cecilia/Downloads/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/machine
 390              		.file 3 "/Users/cecilia/Downloads/gcc-arm-none-eabi-8-2019-q3-update/arm-none-eabi/include/sys/_st
 391              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 392              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 393              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xb.h"
 394              		.file 7 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 395              		.file 8 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 396              		.file 9 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 397              		.file 10 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 398              		.file 11 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
ARM GAS  /var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s 			page 14


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:16     .text.NMI_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:24     .text.NMI_Handler:0000000000000000 NMI_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:41     .text.HardFault_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:48     .text.HardFault_Handler:0000000000000000 HardFault_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:64     .text.MemManage_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:71     .text.MemManage_Handler:0000000000000000 MemManage_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:87     .text.BusFault_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:94     .text.BusFault_Handler:0000000000000000 BusFault_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:110    .text.UsageFault_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:117    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:133    .text.SVC_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:140    .text.SVC_Handler:0000000000000000 SVC_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:153    .text.DebugMon_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:160    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:173    .text.PendSV_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:180    .text.PendSV_Handler:0000000000000000 PendSV_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:193    .text.SysTick_Handler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:200    .text.SysTick_Handler:0000000000000000 SysTick_Handler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:220    .text.TIM2_IRQHandler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:227    .text.TIM2_IRQHandler:0000000000000000 TIM2_IRQHandler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:247    .text.TIM2_IRQHandler:000000000000000c $d
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:252    .text.TIM3_IRQHandler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:259    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:279    .text.TIM3_IRQHandler:000000000000000c $d
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:284    .text.TIM4_IRQHandler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:291    .text.TIM4_IRQHandler:0000000000000000 TIM4_IRQHandler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:311    .text.TIM4_IRQHandler:000000000000000c $d
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:316    .text.USART2_IRQHandler:0000000000000000 $t
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:323    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
/var/folders/fr/_fzkl2b500x6jnd03zkv75240000gn/T//ccHZ21GH.s:380    .text.USART2_IRQHandler:000000000000003c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_TIM_IRQHandler
htim2
htim3
htim4
HAL_UART_GetState
HAL_UART_IRQHandler
huart2
uartdata
pitch_angle
